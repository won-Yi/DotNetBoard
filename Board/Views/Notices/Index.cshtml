@model Board.Controllers.NoticeDto


@{
    ViewData["Title"] = "Index";
}

@section Scripts{
    <script>
        function ChangeSelete() {
            var optionSeleted = document.getElementById('selected');
            var selected = optionSeleted.options[optionSeleted.selectedIndex].value;
            console.log(selected)
            window.location.href = "/Notices/Index/?Category=" + selected;
        }
    

        const rowPerPage = 10; //페이지당 몇개를 보여줄지


        const rows = document.querySelectorAll('#trs');
        const rowsCount = '@Model.Notices.Count'
        const PageCount = Math.ceil(rowsCount/rowPerPage);
        const numbers = document.querySelector('#numbers');
        let idx ;

        let start;
        let end;

        

        //페이지네이션 생성
        for (let i = 1 ; i <= PageCount; i++) {
            numbers.innerHTML += `<li style="margin-left:10px;border-radius: 30px;"><a class="page-link" href=""> ${i} </a></li>`
        }
        const numbersBtn = numbers.querySelectorAll('a');
        const best = document.querySelectorAll('#Best');
        let bestArray = [...best]

        numbersBtn.forEach(function(item,idx){
            item.addEventListener('click', (e)=>{
                e.preventDefault();
                for (nb of numbersBtn){
                   nb.classList.remove('active');
                }
                e.target.classList.add('active');

                console.log(best)
                if (idx == 0) {
                    for (b of bestArray) {
                        b.style.display = '';
                    }
                } else {
                    for (b of bestArray) {
                        b.style.display = 'none';
                    }
                }

                //테이블을 출력해주는 함수
               displayRow(idx)

            })
        });//

        function displayRow(idx){
            
            start = idx * rowPerPage;
            end = start + rowPerPage; //0이면 10, 1이면 20,

            //[...row]이것도 Array.from(rows)와 같은 의미
            let rowsArray = Array.from(rows);
            //console.log(rowsArray)
            for (ra of rowsArray) {
                ra.style.display='none';
            }
                       
            let newRows = rowsArray.slice(start,end);
            for (nr of newRows){
                nr.style.display = '';
            }//

           
        }//displayRow

        //시작하자마자 실행되는 함수
        displayRow(0);

        ids = []
 
        //checkbox
        function checkDelete(id){
            console.log(id)
            const chbox = document.getElementById(id)
            const is_che

            //생각보다 몇시간이나 걸렸던 부분
            // 너무 어렵게 생각해서 계속 잘 안됐는데 그냥 inclues를 사용해서 이미 체크했던 값이 또 들어오면 삭제하는 것으로...
            
            if (is_checked) {
                ids.push(id);
            }else{
                if (ids.includes(id)) {
                    ids.splice(ids.indexOf(id), 1);
                }
            }

            console.log('ids:', ids)

            }//


        function BulkDelete(){
            $.ajax({
                url: 'https://localhost:7295/Notices/BulkDelete',
                type: 'POST',
                data: { 'ids': ids },
                success: function (result) {
                    location.reload();
                },
                error: function (error) {
                    alert(error)
                }
            });
        }

        //전체체크 클릭 시
        function checkAll() {
            ids = [] //전체 클릭시 일단 배열 싹 비워


            let rowsArray = Array.from(rows);
            let newRows = rowsArray.slice(start, end);

            var cboxes = document.getElementsByName("cbox");

            for (var i = 0; i < newRows.length; i++) {
                    //chboxe의 id값을 가져와서 ids에 push하여 준다.
                    cboxes[i].checked = document.getElementById("checkall").checked;
                    console.log(cboxes[i].id)
                    ids.push(cboxes[i].id)
                }

            console.log(ids);
            }//

</script>
}

<style>
    #numbers li a.active{
       
    }
    .paginationwrap {
        width: 100%;
        height:80px;
        margin-top:50px;
        
        position: relative;
    }

    .pagination{
        width: 100px;
        height: 100px;
       
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .BestNotice{
        background-color: #EBF5FF;
    }

 
    .material-symbols-outlined {
        font-variation-settings: 'FILL' 1, 'wght' 400, 'GRAD' 0, 'opsz' 48
    }

</style>
@*
asp-items="Model.Categorys"*@

<div style="width:500px; height:50px; margin-top:40px; display: flex;">
    <div style="padding-right:10px;">
        <select asp-for="Category" asp-items="Model.Categorys" id="selected" onchange="ChangeSelete()" class="form-select" aria-label="Default select example">
            <option value="">All</option>
            @*<option value="무료나눔"></option>
            <option value="정보">정보</option>
            <option value="잡담">잡담</option>*@
        </select>
    </div>
    <div>
        
    </div>
    <div>
        <form asp-controller="Notices" asp-action="Index" method="get">
            <p>
                Title: <input type="text" name="SearchString" />
                <input type="submit" value="Filter" />
            </p>
        </form>
    </div>
</div>


<div>
    <span id="displayCount"></span>
        <table class="table table-striped table-hover" style="margin-top:30px;">
        <thead id="theadalways" style="background-color:#505050; color:white;">
            <tr>
                <th>
                    <input type="checkbox" id="checkall" onclick="checkAll()" />
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Notices![0].Id)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Notices![0].Category)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Notices![0].Title)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Notices![0].UserName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Notices![0].UpdateDate)
                </th>
                <th>
                    조회수
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var i in Model.BestNotice!)
            {
            <tr class="BestNotice" id="Best">
                <td>
                    <span class="material-symbols-outlined" style="margin-left:20px;">
                        favorite
                    </span>
                </td>
                <td>
                        @Html.DisplayFor(modelItem => i.Id)
                </td>
                    <td>
                        @Html.DisplayFor(modelItem => i.Category)
                    </td>
                    <td>
                        <a asp-action="Details" asp-route-id="@i.Id" style="text-decoration: none; color:black; ">
                           @Html.DisplayFor(modelItem => i.Title)
                        </a>
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => i.UserName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => i.UpdateDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => i.Views_Number)
                    </td>
            </tr>
            }
           
            @foreach (var item in Model.Notices!)
            {
                <tr id="trs">
                    <td>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value=""
                                   name ="cbox" id="@item.Id" style="border:solid gray;"
                                   onclick="checkDelete('@item.Id')"
                                    />
                            @*onclick="if(this.checked){ checkDelete('@item.Id'); }"*@
                            <label class="form-check-label" for="flexCheckDefault">
                            </label>
                        </div>
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Id)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Category)
                    </td>
                    <td>
                        <a asp-action="Details" asp-route-id="@item.Id" style="text-decoration: none; color:black; ">@Html.DisplayFor(modelItem => item.Title)</a>
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.UserName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.UpdateDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Views_Number)
                    </td>

                </tr>
            }
    </table>
</div>
<div style="display:flex; justify-content:space-between">
   
    <div>
        <button class="btn btn-outline-success" onclick="BulkDelete()">삭제</button>
    </div>
    <p>
        <a asp-action="Create"><button type="button" class="btn btn-outline-secondary">글쓰기</button></a>
    </p>
</div>

<div class="paginationwrap">
    <div class="pagination">
        <!-- pagination -->
        <ol id="numbers" style="display:flex; list-style: none;">
        </ol>
    </div>
</div>


