@model Board.Models.Notice

@{
    ViewData["Title"] = "Edit";
}

@{
    var title = Model.Title;
}

@section Styles{
    <script src="https://cdn.ckeditor.com/ckeditor5/36.0.1/classic/ckeditor.js"></script>

}


<style>
    .title {
        width: 300px;
        border: none;
        border-bottom: 1px solid gray;
        border-radius: 0px;
        margin-bottom:30px;
    }
    .form-select {
        margin-top: 30px;
        width: 300px;
    }
    .username {
        width:200px;
        margin-bottom:20px;
        margin-top:20px;
        border: none;
        border-bottom: 1px solid gray;
    }
    textarea {
        width: 80%;
        height: 20.25em;
        border: 1px solid gray;
        resize: none;
        border-radius: 10px;
        margin-bottom: 30px;
    }

    .upload-container {
        position: relative;
    }

        .upload-container input {
            border: 1px solid #92b0b3;
            background: #f1f1f1;
            outline: 2px dashed #92b0b3;
            outline-offset: -10px;
            padding: 100px 0px 100px 250px;
            text-align: center !important;
            width: 100%;
            height: 40px;
        }

            .upload-container input:hover {
                background: #ddd;
            }

    .ck-content {
        min-height: 550px;
    }

    .ck-content {
        margin-bottom: 20px;
    }
</style>
<div style="margin-top:30px;"></div>
<h4>Notice</h4>
<hr />
<div>
    <div>
      @*  <form asp-action="Edit" method="post" enctype="multipart/form-data">*@
        <select asp-for="Category" name="Category" id="category" class="form-select">
                <option value="">All</option>
                <option value="잡담">잡담</option>
                <option value="유머">유머</option>
                <option value="정보">정보</option>
            </select>
            <div class="form-group username">

            <input asp-for="UserName" class="form-control" id="username" value=@Model.UserName />
            <span asp-validation-for="UserName"  class="text-danger"></span>
            </div>
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group">

            <input asp-for="Title" class="form-control title" id="title" value="@Model.Title" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
            <div class="form-group">
              
                @*<textarea asp-for="Content" class="form-control">@Model.Content</textarea>*@
            <textarea asp-for="Content" id="editor" name="Content" class="form-control">@Html.Raw(Model.Content)</textarea>
                <span asp-validation-for="Content" class="text-danger"></span>
            </div>
            @*<div class="upload-container">
                <input type="file" name="files" id="file" multiple />
            </div>*@
            <div class="form-group" style="margin-bottom:20px; margin-top:20px;">
            <input type="submit" value="수정" class="btn btn-outline-primary" id="actionCreate" @*onclick="fnSendFile()"*@ />
             <input type="hidden" id="id_value" value="@Model.Id" />
            </div>
           @* <input type="hidden" asp-for="Id" />
            
        </form>*@
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>

        class UploadAdapter {
            constructor(loader, url) {
                this.loader = loader;
                this.url = url;
            }

            upload() {
                return this.loader.file.then(file => new Promise((resolve, reject) => {
                    let formData = new FormData();
                    formData.append('file', file);
                    fetch(this.url, {
                        method: 'POST',
                        body: formData,
                    })
                        .then(response => {
                            response.json().then(data => {
                                const url = new URL(data.imageUrl, window.location.origin); // URL 생성
                                const absoluteUrl = url.href // 절대 경로 추출
                                resolve({
                                    default: absoluteUrl
                                });
                            });

                        })
                        .catch(error => {
                            reject('파일 업로드 중 오류가 발생했습니다.');
                        });
                }));
            }

            abort() {
                // 업로드가 취소되는 경우에 수행할 작업을 여기에 작성합니다.
            }
        }


        ClassicEditor
            .create(document.querySelector('#editor'))
            .then(editor => {
                editor.model.document.on('change', () => {
                    var htmlContent = editor.getData();
                    document.getElementById("editor").value = htmlContent;
                });

                editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
                    return new UploadAdapter(loader, 'https://localhost:7295/Notices/Upload');
                };
            })
            .catch(error => {
                console.error(error);
            });//


        document.querySelector('#actionCreate').addEventListener('click', () => {
            let content = document.getElementById('editor').value;
            let id = document.getElementById('id_value').value;
            console.log(id,'id_value');
            let title = document.getElementById('title').value;
            let username = document.getElementById('username').value;
            let select = document.getElementById('category');
            let selectValue = select.value;

            console.log(content, title, username, selectValue)

            $.ajax({
                url: "https://localhost:7295/Notices/Edit/" + id,
                data: {
                    "content": content,
                    "title": title,
                    "username": username,
                    "category": selectValue,
                },
                type: "POST",
                success: function (data) {
                    console.log(data.result)
                    if (data.result == 0) {
                        window.location.href = "https://localhost:7295/Notices/Details/" + id;
                    }
                    else {
                        alert("실패");
                    }
                },
                error: function (err) {

                    alert(err.statusText);
                }
            });//ajax
        });

        //function fnSendFile() {

        //    let formData = new FormData();
        //    let files = $('input=[name=files]')[0].files;
        //    for (i = 0; i < files.length; i++) {
        //        formData.append('files', files[i])
        //    }

        //    $.ajax({
        //        url: '/Notices/Create',
        //        data: formData,
        //        type: "POST",
        //        contentType: false,
        //        processData: false,
        //        async: false,
        //        success: function (data) {
        //            if (data.result == 0) {
        //                                 파일 업로드 후 리스트 초기화
        //                alert("파일 업로드 완료!");
        //                                 컨트롤러 메인 페이지로 이동
        //                window.location.href = "/Home";
        //            }
        //            else {
        //                alert("파일 업로드 실패!");
        //            }
        //        },
        //        error: function (err) {
        //                             에러일 경우 에러 메세지 출력
        //            alert(err.statusText);
        //        }
        //    });


        //    var _FormData = new FormData(); // 서버 전송 폼 변수
        //    var _FILE_MAX_SIZE = 10;        // 업로드 파일 최대 사이즈

        //    window.onload = function () {
        //        // 드래그 앤드 드롭 이벤트가 일어나는 태그
        //        var fileArea = document.getElementById('dragDropArea');
        //        // 첨부파일  Input태그
        //        var fileInput = document.getElementById('fileInput');
        //        // 파일을 드래그 해서 범위 안에 두었을 때 발생하는 이벤트
        //        fileArea.addEventListener('dragover', function (evt) {
        //            evt.preventDefault();
        //            fileArea.classList.add('dragover');
        //        });
        //        // 드래그 한 파일을 범위 밖으로 가져 갈 때 발생하는 이벤트
        //        fileArea.addEventListener('dragleave', function (evt) {
        //            evt.preventDefault();
        //            fileArea.classList.remove('dragover');
        //        });

        //        // 드래그 한 파일을 범위 안에 두고 마우스를 떼었을 때 발생하는 이벤트
        //        fileArea.addEventListener('drop', function (evt) {
        //            evt.preventDefault();
        //            fileArea.classList.remove('dragenter');
        //            // 드래그 한 파일 정보를 가져오는 부분
        //            var files = evt.dataTransfer.files;
        //            // 첨부파일  Input태그에 드래그 한 파일을 적용
        //            fileInput.files = files;
        //            // 파일 선택 확인 함수 호출
        //            fnSelectFile();
        //        });
        //    }

        //    // 파일 선택 확인
        //    function fnSelectFile() {
        //        // 파일 사이즈 확인
        //        var maxsize = _FILE_MAX_SIZE * 1024 * 1024;
        //        // 첨부파일 Input태그 호출
        //        var input = document.getElementById('fileInput');
        //        // Input 태그에서 선택된 파일 개수 만큼 반복
        //        for (var i = 0; i < input.files.length; ++i) {
        //            var name = input.files.item(i).name; // 파일명
        //            var size = input.files.item(i).size; // 파일 사이즈

        //            // 파일 사이즈 체크
        //            if (size > maxsize) {
        //                alert("파일은 " + _FILE_MAX_SIZE + "Byte 이하만 가능합니다.");
        //            }
        //            else {
        //                // 폼 데이터에 파일 정보 보존
        //                _FormData.append("files", input.files[i]);
        //            }
        //        }

        //        // 선택 파일을 화면에 표시
        //        fnDisplayFileList();
        //    }

        //    // 선택한 파일을 삭제
        //    function fnCancelFile(name, size) {
        //        // 폼 데이터의 파일 정보 취득
        //        var filelist = _FormData.getAll("files");
        //        // 폼 데이터의 파일 정보 삭제
        //        _FormData.delete("files");
        //        // 취득한 파일 정보 개수 만큼 반복
        //        for (var file of filelist) {
        //            // 삭제 대상 파일인 경우 스킵
        //            if (file.name == name && file.size == size) {
        //                continue;
        //            }
        //            // 폼 데이터에 파일 정보를 다시 보존
        //            _FormData.append("files", file);
        //        }

        //        // 선택 파일을 화면에 표시
        //        fnDisplayFileList();
        //    }

        //    // 선택 파일을 화면에 표시
        //    function fnDisplayFileList() {
        //        var children = "";
        //        var output = document.getElementById('fileList');
        //        filelist = _FormData.getAll("files");
        //        for (var file of filelist) {
        //            var name = file.name;
        //            var size = file.size;
        //            children += '📎&nbsp;&nbsp;&nbsp;' + name + ' ';
        //            children += "<span style='cursor:pointer;color:red;' onclick='javascript:fnCancelFile(\"" + name + "\", " + size + ");'>✖</span><Br />";
        //        }
        //        // 추가되는 파일 목록 태그를 HTML에 적용
        //        output.innerHTML = children;
        //    }
    </script>
}